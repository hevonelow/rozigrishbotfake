import os
from dotenv import load_dotenv
load_dotenv()

# Secure handling of secrets: BOT_TOKEN must be provided via environment variable.
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN not set. Create a .env file or set the BOT_TOKEN environment variable.")

import asyncio
from datetime import datetime, timezone
import aiosqlite

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, BotCommand
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties

# ============== –ö–û–ù–§–ò–ì –ò–ó –û–ö–†–£–ñ–ï–ù–ò–Ø ==============
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME", "snckintr")  # –±–µ–∑ @
ORGANIZER_LINK = os.getenv("ORGANIZER_LINK", "https://t.me/soqys")
ORGANIZER_ADMIN_ID = int(os.getenv("ORGANIZER_ADMIN_ID", "7738555379"))
GIVEAWAY_CODE = os.getenv("GIVEAWAY_CODE", "632")
PRIZE_COUNT = int(os.getenv("PRIZE_COUNT", "3"))
PRIZE_2_NAME = os.getenv("PRIZE_2_NAME", "100 –¥–æ–ª–ª–∞—Ä–æ–≤")
DB_PATH = os.getenv("DB_PATH", "giveaway.db")

# –ù–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ .env (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
GIVEAWAY_START = os.getenv("GIVEAWAY_START")  # "YYYY-MM-DD HH:MM" –∏–ª–∏ "DD.MM.YYYY HH:MM" –∏–ª–∏ ISO
GIVEAWAY_END   = os.getenv("GIVEAWAY_END")
# ================================================

# ================== BOT/DP ==================
if (not BOT_TOKEN) or (":" not in BOT_TOKEN) or (" " in BOT_TOKEN):
    raise RuntimeError("BOT_TOKEN –ø—É—Å—Ç–æ–π –∏–ª–∏ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# ===== –ü—Ä–æ—Å—Ç–æ–π ¬´—Å—Ç–µ–π—Ç¬ª –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (–±–µ–∑ FSM) =====
ADMIN_BROADCAST_WAIT = False   # –∂–¥—ë–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ /admin –∏–ª–∏ /broadcast

# ================== –£–¢–ò–õ–ò–¢–´ ==================
def now_utc() -> datetime:
    return datetime.now(timezone.utc)

def now_iso() -> str:
    return now_utc().isoformat()

def parse_human_dt_to_utc(s: str) -> datetime | None:
    """
    –ü–∞—Ä—Å–∏—Ç –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ UTC:
    - 'YYYY-MM-DD HH:MM'
    - 'DD.MM.YYYY HH:MM'
    - ISO 'YYYY-MM-DDTHH:MM(:SS)(+TZ)'
    """
    if not s:
        return None
    s = s.strip().replace("\u00A0", " ")
    try:
        dt = datetime.strptime(s, "%Y-%m-%d %H:%M")
        return dt.astimezone().astimezone(timezone.utc)
    except Exception:
        pass
    try:
        dt = datetime.strptime(s, "%d.%m.%Y %H:%M")
        return dt.astimezone().astimezone(timezone.utc)
    except Exception:
        pass
    try:
        dt = datetime.fromisoformat(s)
        if dt.tzinfo is None:
            dt = dt.astimezone()
        return dt.astimezone(timezone.utc)
    except Exception:
        return None

def fmt_dt_local(iso_or_dt) -> str:
    """ISO-—Å—Ç—Ä–æ–∫—É –∏–ª–∏ datetime ‚Üí 'YYYY-MM-DD HH:MM' (–ª–æ–∫–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞)."""
    if not iso_or_dt:
        return "‚Äî"
    try:
        if isinstance(iso_or_dt, str):
            dt = datetime.fromisoformat(iso_or_dt)
            if dt.tzinfo is None:
                dt = dt.replace(tzinfo=timezone.utc)
        else:
            dt = iso_or_dt
        return dt.astimezone().strftime("%Y-%m-%d %H:%M")
    except Exception:
        return str(iso_or_dt)

async def safe_delete(msg: Message):
    try:
        await msg.delete()
    except Exception:
        pass

# ================== DB ==================
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS giveaways (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            code TEXT UNIQUE,
            organizer_link TEXT,
            prize_count INTEGER,
            created_at TEXT,
            results_at TEXT,
            status TEXT,           -- 'open' | 'finished'
            prize_2 TEXT,
            start_at TEXT,
            end_at TEXT
        )
        """)
        await db.execute("""
        CREATE TABLE IF NOT EXISTS participants (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            tg_id INTEGER,
            giveaway_code TEXT,
            joined_at TEXT
        )
        """)
        cur = await db.execute("SELECT code FROM giveaways WHERE code = ?", (GIVEAWAY_CODE,))
        row = await cur.fetchone()
        if not row:
            await db.execute("""
                INSERT INTO giveaways(code, organizer_link, prize_count, created_at, status, prize_2, start_at, end_at)
                VALUES (?, ?, ?, ?, 'open', ?, NULL, NULL)
            """, (GIVEAWAY_CODE, ORGANIZER_LINK, PRIZE_COUNT, now_iso(), PRIZE_2_NAME))
            await db.commit()

async def get_giveaway():
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("""
            SELECT code, organizer_link, prize_count, created_at, results_at, status, prize_2, start_at, end_at
            FROM giveaways WHERE code = ?
        """, (GIVEAWAY_CODE,))
        r = await cur.fetchone()
        if not r:
            return None
        return {
            "code": r[0], "organizer_link": r[1], "prize_count": r[2],
            "created_at": r[3], "results_at": r[4], "status": r[5], "prize_2": r[6],
            "start_at": r[7], "end_at": r[8]
        }

async def set_times_in_db(start_dt_utc: datetime | None = None, end_dt_utc: datetime | None = None):
    async with aiosqlite.connect(DB_PATH) as db:
        if start_dt_utc is not None and end_dt_utc is not None:
            await db.execute("UPDATE giveaways SET start_at=?, end_at=? WHERE code=?",
                             (start_dt_utc.isoformat(), end_dt_utc.isoformat(), GIVEAWAY_CODE))
        elif start_dt_utc is not None:
            await db.execute("UPDATE giveaways SET start_at=? WHERE code=?",
                             (start_dt_utc.isoformat(), GIVEAWAY_CODE))
        elif end_dt_utc is not None:
            await db.execute("UPDATE giveaways SET end_at=? WHERE code=?",
                             (end_dt_utc.isoformat(), GIVEAWAY_CODE))
        await db.commit()

async def set_giveaway_finished_with_results(results_dt_utc: datetime):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            UPDATE giveaways SET status='finished', results_at=? WHERE code=?
        """, (results_dt_utc.isoformat(), GIVEAWAY_CODE))
        await db.commit()

# ================== –õ–û–ì–ò–ö–ê –°–¢–ê–¢–£–°–ê ==================
def calc_status(gw: dict) -> str:
    """'–æ–∂–∏–¥–∞–µ—Ç—Å—è' | '–∞–∫—Ç–∏–≤–µ–Ω' | '–∑–∞–≤–µ—Ä—à–µ–Ω' (—É—á–∏—Ç—ã–≤–∞–µ—Ç start_at/end_at + —Å—Ç–∞—Ç—É—Å –∏–∑ –ë–î)."""
    if gw["status"] == "finished":
        return "–∑–∞–≤–µ—Ä—à–µ–Ω"
    now = now_utc()
    start = datetime.fromisoformat(gw["start_at"]).astimezone(timezone.utc) if gw["start_at"] else None
    end = datetime.fromisoformat(gw["end_at"]).astimezone(timezone.utc) if gw["end_at"] else None
    if start and now < start:
        return "–æ–∂–∏–¥–∞–µ—Ç—Å—è"
    if end and now > end:
        return "–∑–∞–≤–µ—Ä—à–µ–Ω"
    return "–∞–∫—Ç–∏–≤–µ–Ω"

# ================== –ü–û–î–ü–ò–°–ö–ê ==================
async def is_subscribed(user_id: int) -> bool:
    """–î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ get_chat_member –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å."""
    try:
        member = await bot.get_chat_member(chat_id=f"@{CHANNEL_USERNAME}", user_id=user_id)
        status = getattr(member, "status", None)
        if hasattr(status, "value"):
            status = status.value
        return status in ("member", "administrator", "creator")
    except Exception:
        return False

def subscribe_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME}"))
    kb.row(InlineKeyboardButton(text="‚ôª –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub"))
    return kb.as_markup()

# === ReplyKeyboard (–∫–∞–∫ ¬´–º–µ–Ω—é¬ª) ===
def main_reply_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à")],
            [KeyboardButton(text="üìù –ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏")],
            [KeyboardButton(text="üì¢ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")],
        ],
        resize_keyboard=True,
        is_persistent=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚Ä¶"
    )

# === –ê–¥–º–∏–Ω-–º–µ–Ω—é (inline —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞) ===
def admin_menu_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="üì£ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º", callback_data="admin_broadcast"))
    kb.row(InlineKeyboardButton(text="üïí –ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º–µ–Ω–∞", callback_data="admin_showtimes"))
    return kb.as_markup()

# ================== –¢–ï–ö–°–¢–´ ==================
def build_giveaway_text(*, gw: dict, finished_view: bool = False, user_tg_id: int | None = None) -> str:
    code = gw["code"]
    status_word = calc_status(gw)
    header = (f"üéÅ –¢–µ–ø–µ—Ä—å –≤—ã —É—á–∞—Å—Ç–Ω–∏–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ [#{code}, –≤–∞—à ID: {user_tg_id}]\n\n"
              if (not finished_view and status_word != "–∑–∞–≤–µ—Ä—à–µ–Ω") else
              f"‚ùå –†–æ–∑—ã–≥—Ä—ã—à [#{code}] –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n")
    start_txt = fmt_dt_local(gw["start_at"]) if gw["start_at"] else "‚Äî"
    end_txt = fmt_dt_local(gw["end_at"]) if gw["end_at"] else "‚Äî"
    body = (
        f"üëë –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {gw['organizer_link']}\n"
        f"üèüÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç: {gw['prize_count']}\n"
        f"üü¢ –ù–∞—á–∞–ª–æ: {start_txt}\n"
        f"üîö –ö–æ–Ω–µ—Ü: {end_txt}\n"
        f"‚åöÔ∏è –°–æ–∑–¥–∞–Ω: {fmt_dt_local(gw['created_at'])}\n"
        f"‚åöÔ∏è –ò—Ç–æ–≥–∏: {fmt_dt_local(gw['results_at'])}\n\n"
        f"‚úÖ –°—Ç–∞—Ç—É—Å: {status_word}"
    )
    return header + body

# ================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ==================
async def notify_all_participants(results_time_iso: str):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("""
            SELECT DISTINCT tg_id FROM participants
            WHERE giveaway_code = ? AND joined_at <= ?
            ORDER BY tg_id ASC
        """, (GIVEAWAY_CODE, results_time_iso))
        rows = await cur.fetchall()

    sent = 0
    for (uid,) in rows:
        try:
            await bot.send_message(uid, "üé≤ –ë–æ—Ç –ø–æ–¥–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–∏...")
            await asyncio.sleep(1)
            text = (
                f"üéÅ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ [#{GIVEAWAY_CODE}, –≤–∞—à ID: {uid}]\n\n"
                f"üéñÔ∏è –ü—Ä–∏–∑–æ–≤–æ–µ –º–µ—Å—Ç–æ: 2 ({PRIZE_2_NAME})\n\n"
                f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {ORGANIZER_LINK}"
            )
            await bot.send_message(uid, text, disable_web_page_preview=True)
            sent += 1
        except Exception:
            pass
    return sent

# ======= –ê–¥–º–∏–Ω—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º =======
async def broadcast_to_all(text_for_user: str) -> tuple[int, int]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –¥–∞–Ω–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—à–Ω–æ, –≤—Å–µ–≥–æ_–∞–¥—Ä–µ—Å–∞—Ç–æ–≤)
    """
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("""
            SELECT DISTINCT tg_id FROM participants
            WHERE giveaway_code = ?
            ORDER BY tg_id ASC
        """, (GIVEAWAY_CODE,))
        users = [row[0] for row in (await cur.fetchall())]

    ok = 0
    total = len(users)

    for uid in users:
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —É–∑–Ω–∞—Ç—å username
        username_label = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        try:
            chat = await bot.get_chat(uid)
            if getattr(chat, "username", None):
                username_label = chat.username
        except Exception:
            pass

        formatted = (
            f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è {username_label} [id {uid}]\n\n"
            f"{text_for_user}"
        )
        try:
            await bot.send_message(uid, formatted, disable_web_page_preview=True)
            ok += 1
            await asyncio.sleep(0.05)  # –ª—ë–≥–∫–∏–π —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥
        except Exception:
            # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞/–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª/–æ—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
            pass

    return ok, total

# ================== –ó–ê–í–ï–†–®–ï–ù–ò–ï ==================
async def finish_if_due():
    """–ï—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª end_at –∏ —Ä–æ–∑—ã–≥—Ä—ã—à –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è."""
    gw = await get_giveaway()
    if not gw or gw["status"] == "finished":
        return False
    end = datetime.fromisoformat(gw["end_at"]).astimezone(timezone.utc) if gw["end_at"] else None
    if end and now_utc() >= end:
        await set_giveaway_finished_with_results(end)  # –ò—Ç–æ–≥–∏ = –∫–æ–Ω–µ—Ü
        await notify_all_participants(end.isoformat())
        return True
    return False

async def auto_watcher():
    try:
        await finish_if_due()   # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    except Exception as e:
        print("[AutoFinish@startup] –û—à–∏–±–∫–∞:", e)
    while True:
        try:
            await asyncio.sleep(20)
            await finish_if_due()
        except Exception as e:
            print("[AutoFinish@loop] –û—à–∏–±–∫–∞:", e)

# ================== –•–ï–ù–î–õ–ï–†–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ==================
@dp.message(Command("start"))
async def cmd_start(m: Message):
    gw = await get_giveaway()
    if not gw:
        await m.answer("–û—à–∏–±–∫–∞: —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_reply_keyboard())
        return

    status_word = calc_status(gw)
    if status_word == "–∑–∞–≤–µ—Ä—à–µ–Ω":
        await m.answer(build_giveaway_text(gw=gw, finished_view=True),
                       disable_web_page_preview=True, reply_markup=main_reply_keyboard())
        return

    if status_word == "–æ–∂–∏–¥–∞–µ—Ç—Å—è":
        await m.answer("‚è≥ –†–æ–∑—ã–≥—Ä—ã—à –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª—Å—è.\n\n" +
                       build_giveaway_text(gw=gw, finished_view=False, user_tg_id=m.from_user.id),
                       reply_markup=main_reply_keyboard(), disable_web_page_preview=True)
        return

    text = ("üõë –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞.\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚ôª –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.")
    await m.answer(text, reply_markup=main_reply_keyboard())
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=subscribe_keyboard())

@dp.callback_query(F.data == "check_sub")
async def cb_check_sub(c: CallbackQuery):
    gw = await get_giveaway()
    if not gw:
        await c.answer("–û—à–∏–±–∫–∞: —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    status_word = calc_status(gw)
    if status_word == "–∑–∞–≤–µ—Ä—à–µ–Ω":
        try:
            await c.message.edit_text(build_giveaway_text(gw=gw, finished_view=True),
                                      disable_web_page_preview=True)
        except Exception:
            await c.message.answer(build_giveaway_text(gw=gw, finished_view=True),
                                   disable_web_page_preview=True)
        await c.answer()
        return

    ok = await is_subscribed(c.from_user.id)
    if not ok:
        await c.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)
        return

    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç)
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("""
            SELECT id FROM participants WHERE tg_id = ? AND giveaway_code = ?
        """, (c.from_user.id, GIVEAWAY_CODE))
        row = await cur.fetchone()
        if not row:
            await db.execute("""
                INSERT INTO participants(tg_id, giveaway_code, joined_at)
                VALUES (?, ?, ?)
            """, (c.from_user.id, GIVEAWAY_CODE, now_iso()))
            await db.commit()

    text = build_giveaway_text(gw=gw, finished_view=False, user_tg_id=c.from_user.id)
    try:
        await c.message.edit_text(text, disable_web_page_preview=True)
    except Exception:
        await c.message.answer(text, disable_web_page_preview=True)
    await c.answer("–£—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")

# ================== –•–ï–ù–î–õ–ï–†–´ –ê–î–ú–ò–ù–ê (–º–µ–Ω—é, –≤—Ä–µ–º—è, —Ä–∞—Å—Å—ã–ª–∫–∞) ==================
def admin_only(m: Message) -> bool:
    return m.from_user and (m.from_user.id == ORGANIZER_ADMIN_ID)

@dp.message(Command("admin"))
async def cmd_admin(m: Message):
    if not admin_only(m):
        await m.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É.")
        return
    # –í–°–ï–ì–î–ê —à–ª—ë–º –∫–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç + –∫–Ω–æ–ø–∫–∏
    txt = (
        "üîß –ê–¥–º–∏–Ω-–º–µ–Ω—é.\n\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´üì£ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º¬ª ‚Äî –∑–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏ —è —Ä–∞–∑–æ—à–ª—é –µ–≥–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.\n"
        "‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /broadcast <—Ç–µ–∫—Å—Ç>\n"
        "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Ä–µ–º–µ–Ω–∞ ‚Äî –∫–Ω–æ–ø–∫–∞ ¬´üïí –ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º–µ–Ω–∞¬ª."
    )
    try:
        await m.answer(txt, reply_markup=admin_menu_keyboard())
    except Exception:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ inline-–∫–Ω–æ–ø–∫–∏ –Ω–µ –æ—Ç—Ä–∏—Å—É—é—Ç—Å—è
        await m.answer(txt + "\n\n(–ö–Ω–æ–ø–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∏—Å—å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /broadcast <—Ç–µ–∫—Å—Ç>)")

@dp.callback_query(F.data == "admin_showtimes")
async def cb_admin_showtimes(c: CallbackQuery):
    if c.from_user.id != ORGANIZER_ADMIN_ID:
        await c.answer()
        return
    gw = await get_giveaway()
    if not gw:
        await c.message.answer("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await c.answer()
        return
    start_txt = fmt_dt_local(gw["start_at"]) if gw["start_at"] else "‚Äî"
    end_txt = fmt_dt_local(gw["end_at"]) if gw["end_at"] else "‚Äî"
    await c.message.answer(f"üïí –¢–µ–∫—É—â–∏–µ –≤—Ä–µ–º–µ–Ω–∞:\nüü¢ –ù–∞—á–∞–ª–æ: {start_txt}\nüîö –ö–æ–Ω–µ—Ü: {end_txt}")
    await c.answer("")

@dp.callback_query(F.data == "admin_broadcast")
async def cb_admin_broadcast(c: CallbackQuery):
    global ADMIN_BROADCAST_WAIT
    if c.from_user.id != ORGANIZER_ADMIN_ID:
        await c.answer()
        return
    ADMIN_BROADCAST_WAIT = True
    await c.message.answer(
        "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
        "–û–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è <username> [id <id>]\n\n"
        "<—Ç–≤–æ–π_—Ç–µ–∫—Å—Ç>"
    )
    await c.answer("–ñ–¥—É —Ç–µ–∫—Å—Ç üëç")

@dp.message(Command("broadcast"))
async def cmd_broadcast(m: Message):
    """–ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –∫–Ω–æ–ø–∫–∏: /broadcast <—Ç–µ–∫—Å—Ç>"""
    global ADMIN_BROADCAST_WAIT
    if not admin_only(m):
        return
    parts = m.text.split(maxsplit=1)
    if len(parts) == 1:
        ADMIN_BROADCAST_WAIT = True
        await m.answer("‚úçÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /broadcast <—Ç–µ–∫—Å—Ç>).")
        return
    text_for_all = parts[1].strip()
    await m.answer("üì§ –†–∞—Å—Å—ã–ª–∞—é‚Ä¶")
    ok, total = await broadcast_to_all(text_for_all)
    await m.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ. –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {ok} –∏–∑ {total}.")

@dp.message(F.text)
async def admin_broadcast_catcher(m: Message):
    """
    –õ–æ–≤–∏–º —Ç–µ–∫—Å—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ¬´üì£ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º¬ª
    –∏–ª–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /broadcast –±–µ–∑ —Ç–µ–∫—Å—Ç–∞.
    """
    global ADMIN_BROADCAST_WAIT
    if not ADMIN_BROADCAST_WAIT:
        return
    if not admin_only(m):
        return

    ADMIN_BROADCAST_WAIT = False
    text_for_all = m.text.strip()
    if not text_for_all:
        await m.answer("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç. –ù–∞–∂–º–∏ /admin –∏ –≤—ã–±–µ—Ä–∏ ¬´üì£ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º¬ª –µ—â—ë —Ä–∞–∑.")
        return

    await m.answer("üì§ –†–∞—Å—Å—ã–ª–∞—é‚Ä¶ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
    ok, total = await broadcast_to_all(text_for_all)
    await m.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ. –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {ok} –∏–∑ {total}.")

@dp.message(Command("set_start"))
async def cmd_set_start(m: Message):
    if not admin_only(m):
        return
    args = m.text.split(maxsplit=1)
    if len(args) < 2:
        await m.answer("–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: /set_start YYYY-MM-DD HH:MM\n–∏–ª–∏: /set_start DD.MM.YYYY HH:MM")
        return
    dt = parse_human_dt_to_utc(args[1])
    if not dt:
        await m.answer("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É. –ü—Ä–∏–º–µ—Ä: 2025-10-05 21:00")
        return
    await set_times_in_db(start_dt_utc=dt)
    await m.answer(f"‚úÖ –ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {fmt_dt_local(dt)}")

@dp.message(Command("set_end"))
async def cmd_set_end(m: Message):
    if not admin_only(m):
        return
    args = m.text.split(maxsplit=1)
    if len(args) < 2:
        await m.answer("–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞: /set_end YYYY-MM-DD HH:MM\n–∏–ª–∏: /set_end DD.MM.YYYY HH:MM")
        return
    dt = parse_human_dt_to_utc(args[1])
    if not dt:
        await m.answer("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É. –ü—Ä–∏–º–µ—Ä: 2025-10-05 21:00")
        return
    await set_times_in_db(end_dt_utc=dt)
    await m.answer(f"‚úÖ –ö–æ–Ω–µ—Ü —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {fmt_dt_local(dt)}")

@dp.message(Command("show_times"))
async def cmd_show_times(m: Message):
    if not admin_only(m):
        return
    gw = await get_giveaway()
    if not gw:
        await m.answer("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    start_txt = fmt_dt_local(gw["start_at"]) if gw["start_at"] else "‚Äî"
    end_txt = fmt_dt_local(gw["end_at"]) if gw["end_at"] else "‚Äî"
    await m.answer(f"üïí –¢–µ–∫—É—â–∏–µ –≤—Ä–µ–º–µ–Ω–∞:\nüü¢ –ù–∞—á–∞–ª–æ: {start_txt}\nüîö –ö–æ–Ω–µ—Ü: {end_txt}")

@dp.message(Command("end"))
async def cmd_end(m: Message):
    if not admin_only(m):
        await m.answer("–¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à.", reply_markup=main_reply_keyboard())
        return

    gw = await get_giveaway()
    if not gw:
        await m.answer("–û—à–∏–±–∫–∞: —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_reply_keyboard())
        return
    if gw["status"] == "finished":
        await m.answer("–†–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=main_reply_keyboard())
        return

    end_dt = datetime.fromisoformat(gw["end_at"]).astimezone(timezone.utc) if gw["end_at"] else now_utc()
    await set_giveaway_finished_with_results(end_dt)
    await notify_all_participants(end_dt.isoformat())

    gw2 = await get_giveaway()
    await m.answer(
        f"–†–æ–∑—ã–≥—Ä—ã—à #{GIVEAWAY_CODE} –∑–∞–≤–µ—Ä—à—ë–Ω.\n"
        f"–ò—Ç–æ–≥–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã: {fmt_dt_local(gw2['results_at'])}",
        reply_markup=main_reply_keyboard()
    )

# ================== –ó–ê–ü–£–°–ö ==================
async def main():
    await init_db()
    print("Bot started.")

    # –ê–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç –∏–∑ .env (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã)
    start_dt = parse_human_dt_to_utc(GIVEAWAY_START)
    end_dt   = parse_human_dt_to_utc(GIVEAWAY_END)
    if start_dt or end_dt:
        await set_times_in_db(start_dt_utc=start_dt, end_dt_utc=end_dt)

    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ –∫–æ–≥–¥–∞-—Ç–æ —Å—Ç–∞–≤–∏–ª webhook ‚Äî –≤—ã–∫–ª—é—á–∏–º –ø–µ—Ä–µ–¥ polling
    try:
        await bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass

    # –ö–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–ª–∏ —Å–∫—Ä—ã—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é
    await bot.set_my_commands([
        BotCommand(command="admin", description="–ê–¥–º–∏–Ω-–º–µ–Ω—é"),
        BotCommand(command="set_start", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—á–∞–ª–æ"),
        BotCommand(command="set_end", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–µ—Ü"),
        BotCommand(command="show_times", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º–µ–Ω–∞"),
        BotCommand(command="broadcast", description="–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º"),
    ])

    asyncio.create_task(auto_watcher())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
