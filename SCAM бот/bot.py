import asyncio
import os
from datetime import datetime, timezone
import aiosqlite

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, BotCommand
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# ================== ENV ==================
load_dotenv()

BOT_TOKEN = (os.getenv("BOT_TOKEN") or "").strip()
if not BOT_TOKEN or ":" not in BOT_TOKEN or " " in BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –ø—É—Å—Ç–æ–π –∏–ª–∏ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å .env")

CHANNEL_USERNAME = (os.getenv("CHANNEL_USERNAME") or "").strip()  # –±–µ–∑ @
ORGANIZER_LINK = os.getenv("ORGANIZER_LINK", "https://t.me/").strip()
try:
    ORGANIZER_ADMIN_ID = int((os.getenv("ORGANIZER_ADMIN_ID") or "0").strip())
except ValueError:
    raise RuntimeError("ORGANIZER_ADMIN_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤")

GIVEAWAY_CODE = os.getenv("GIVEAWAY_CODE", "632").strip()
PRIZE_COUNT = int(os.getenv("PRIZE_COUNT", "3").strip())
PRIZE_2_NAME = os.getenv("PRIZE_2_NAME", "–ü—Ä–∏–∑").strip()

# –ù–æ–≤—ã–µ –ø–æ–ª—è: –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞/–∫–æ–Ω—Ü–∞ –∏–∑ .env (—á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ)
GIVEAWAY_START_RAW = (os.getenv("GIVEAWAY_START") or "").strip()
GIVEAWAY_END_RAW = (os.getenv("GIVEAWAY_END") or "").strip()

DB_PATH = "giveaway.db"

# ================== BOT/DP ==================
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# ================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ==================
def now_iso() -> str:
    return datetime.now(timezone.utc).isoformat()

def parse_human_dt(s: str) -> datetime | None:
    if not s:
        return None
    try:
        dt = datetime.strptime(s, "%Y-%m-%d %H:%M")
        return dt.astimezone().astimezone(timezone.utc)
    except Exception:
        pass
    try:
        dt = datetime.fromisoformat(s)
        if dt.tzinfo is None:
            dt = dt.astimezone()
        return dt.astimezone(timezone.utc)
    except Exception:
        return None

GIVEAWAY_START = parse_human_dt(GIVEAWAY_START_RAW)
GIVEAWAY_END = parse_human_dt(GIVEAWAY_END_RAW)

def fmt_dt(iso_or_dt) -> str:
    if not iso_or_dt:
        return "‚Äî"
    try:
        if isinstance(iso_or_dt, str):
            dt = datetime.fromisoformat(iso_or_dt)
            if dt.tzinfo is None:
                dt = dt.replace(tzinfo=timezone.utc)
        else:
            dt = iso_or_dt
        return dt.astimezone().strftime("%Y-%m-%d %H:%M")
    except Exception:
        return str(iso_or_dt)

def calc_status_by_time(gw_status_db: str) -> str:
    if gw_status_db == "finished":
        return "–∑–∞–≤–µ—Ä—à–µ–Ω"
    now = datetime.now(timezone.utc)
    if GIVEAWAY_START and now < GIVEAWAY_START:
        return "–æ–∂–∏–¥–∞–µ—Ç—Å—è"
    if GIVEAWAY_END and now > GIVEAWAY_END:
        return "–∑–∞–≤–µ—Ä—à–µ–Ω"
    return "–∞–∫—Ç–∏–≤–µ–Ω"

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS giveaways (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            code TEXT UNIQUE,
            organizer_link TEXT,
            prize_count INTEGER,
            created_at TEXT,
            results_at TEXT,
            status TEXT,           -- 'open' | 'finished'
            prize_2 TEXT
        )
        """)
        await db.execute("""
        CREATE TABLE IF NOT EXISTS participants (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            tg_id INTEGER,
            giveaway_code TEXT,
            joined_at TEXT
        )
        """)
        cur = await db.execute("SELECT code FROM giveaways WHERE code = ?", (GIVEAWAY_CODE,))
        row = await cur.fetchone()
        if not row:
            await db.execute("""
                INSERT INTO giveaways(code, organizer_link, prize_count, created_at, status, prize_2)
                VALUES (?, ?, ?, ?, 'open', ?)
            """, (GIVEAWAY_CODE, ORGANIZER_LINK, PRIZE_COUNT, now_iso(), PRIZE_2_NAME))
        await db.commit()

async def get_giveaway():
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("""
            SELECT code, organizer_link, prize_count, created_at, results_at, status, prize_2
            FROM giveaways WHERE code = ?
        """, (GIVEAWAY_CODE,))
        r = await cur.fetchone()
        if not r:
            return None
        return {
            "code": r[0], "organizer_link": r[1], "prize_count": r[2],
            "created_at": r[3], "results_at": r[4], "status": r[5], "prize_2": r[6]
        }

async def set_giveaway_finished():
    """
    –ò—Ç–æ–≥–∏ = GIVEAWAY_END (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω), –∏–Ω–∞—á–µ: MAX(joined_at) –∏–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è.
    """
    if GIVEAWAY_END is not None:
        results_dt = GIVEAWAY_END
    else:
        async with aiosqlite.connect(DB_PATH) as db:
            cur = await db.execute(
                "SELECT MAX(joined_at) FROM participants WHERE giveaway_code = ?",
                (GIVEAWAY_CODE,)
            )
            max_join, = await cur.fetchone()
            if max_join:
                results_at_iso = max_join
                await db.execute(
                    "UPDATE giveaways SET status='finished', results_at=? WHERE code=?",
                    (results_at_iso, GIVEAWAY_CODE)
                )
                await db.commit()
                return results_at_iso
            else:
                results_dt = datetime.now(timezone.utc)

    results_at_iso = results_dt.isoformat()
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE giveaways SET status='finished', results_at=? WHERE code=?",
            (results_at_iso, GIVEAWAY_CODE)
        )
        await db.commit()
    return results_at_iso

async def is_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=f"@{CHANNEL_USERNAME}", user_id=user_id)
        status = getattr(member, "status", None)
        if hasattr(status, "value"):
            status = status.value
        return status in ("member", "administrator", "creator")
    except Exception:
        return False

def subscribe_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME}"))
    kb.row(InlineKeyboardButton(text="‚ôª –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub"))
    return kb.as_markup()

# === ReplyKeyboard (–∫–∞–∫ –≤ DaVinci, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç, –Ω–µ –∫–æ–º–∞–Ω–¥—ã) ===
def main_reply_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à")],
            [KeyboardButton(text="üìù –ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏")],
            [KeyboardButton(text="üì¢ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")],
        ],
        resize_keyboard=True,
        is_persistent=True,      # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å—Ç–∞—ë—Ç—Å—è
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚Ä¶"
    )

def build_giveaway_text(*, gw: dict, finished_view: bool = False, user_tg_id: int | None = None) -> str:
    code = gw["code"]
    status_word = calc_status_by_time(gw["status"])

    if not finished_view and status_word != "–∑–∞–≤–µ—Ä—à–µ–Ω":
        header = f"üéÅ –¢–µ–ø–µ—Ä—å –≤—ã —É—á–∞—Å—Ç–Ω–∏–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ [#{code}, –≤–∞—à ID: {user_tg_id}]\n\n"
    else:
        header = f"‚ùå –†–æ–∑—ã–≥—Ä—ã—à [#{code}] –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n"

    start_txt = fmt_dt(GIVEAWAY_START) if GIVEAWAY_START else "‚Äî"
    end_txt = fmt_dt(GIVEAWAY_END) if GIVEAWAY_END else "‚Äî"

    body = (
        f"üëë –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {gw['organizer_link']}\n"
        f"üèüÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç: {gw['prize_count']}\n"
        f"üü¢ –ù–∞—á–∞–ª–æ: {start_txt}\n"
        f"üîö –ö–æ–Ω–µ—Ü: {end_txt}\n"
        f"‚åöÔ∏è –°–æ–∑–¥–∞–Ω: {fmt_dt(gw['created_at'])}\n"
        f"‚åöÔ∏è –ò—Ç–æ–≥–∏: {fmt_dt(gw['results_at'])}\n\n"
        f"‚úÖ –°—Ç–∞—Ç—É—Å: {status_word}"
    )
    return header + body

# ================== –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –£–ß–ê–°–¢–ù–ò–ö–û–í ==================
async def notify_all_participants(results_time_iso: str):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("""
            SELECT id, tg_id FROM participants
            WHERE giveaway_code = ? AND joined_at <= ?
            ORDER BY id ASC
        """, (GIVEAWAY_CODE, results_time_iso))
        rows = await cur.fetchall()

    sent = 0
    for pid, uid in rows:
        try:
            await bot.send_message(uid, "üé≤ –ë–æ—Ç –ø–æ–¥–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–∏...")
            await asyncio.sleep(1)
            text = (
                f"üéÅ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ [#{GIVEAWAY_CODE}, –≤–∞—à ID: {uid}]\n\n"
                f"üéñÔ∏è –ü—Ä–∏–∑–æ–≤–æ–µ –º–µ—Å—Ç–æ: 2 ({PRIZE_2_NAME})\n\n"
                f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {ORGANIZER_LINK}"
            )
            await bot.send_message(uid, text, disable_web_page_preview=True)
            sent += 1
        except Exception:
            pass
    return sent

# ================== –ê–í–¢–û-–ó–ê–í–ï–†–®–ï–ù–ò–ï ==================
async def finish_if_due():
    gw = await get_giveaway()
    if not gw:
        return False
    if gw["status"] == "finished":
        return False
    if GIVEAWAY_END and datetime.now(timezone.utc) >= GIVEAWAY_END:
        results_time = await set_giveaway_finished()
        sent = await notify_all_participants(results_time)
        print(f"[AutoFinish] –ò—Ç–æ–≥–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã: {fmt_dt(results_time)}; —É–≤–µ–¥–æ–º–ª–µ–Ω–æ: {sent}")
        return True
    return False

async def auto_watcher():
    try:
        await finish_if_due()
    except Exception as e:
        print("[AutoFinish@startup] –û—à–∏–±–∫–∞:", e)
    while True:
        try:
            await asyncio.sleep(20)
            await finish_if_due()
        except Exception as e:
            print("[AutoFinish@loop] –û—à–∏–±–∫–∞:", e)

# ================== –•–ï–ù–î–õ–ï–†–´ ==================
@dp.message(Command("start"))
async def cmd_start(m: Message):
    gw = await get_giveaway()
    if not gw:
        await m.answer("–û—à–∏–±–∫–∞: —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_reply_keyboard())
        return

    status_word = calc_status_by_time(gw["status"])
    if status_word == "–∑–∞–≤–µ—Ä—à–µ–Ω":
        await m.answer(
            build_giveaway_text(gw=gw, finished_view=True),
            disable_web_page_preview=True,
            reply_markup=main_reply_keyboard()
        )
        return

    if status_word == "–æ–∂–∏–¥–∞–µ—Ç—Å—è":
        await m.answer(
            "‚è≥ –†–æ–∑—ã–≥—Ä—ã—à –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª—Å—è.\n\n" +
            build_giveaway_text(gw=gw, finished_view=False, user_tg_id=m.from_user.id),
            reply_markup=main_reply_keyboard(),
            disable_web_page_preview=True
        )
        return

    text = (
        "üõë –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞.\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚ôª –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª."
    )
    # –í —Å—Ç–∞—Ä—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ReplyKeyboard + inline-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    await m.answer(
        text,
        reply_markup=main_reply_keyboard()
    )
    # –û—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî inline-–∫–Ω–æ–ø–∫–∏ (—á—Ç–æ–±—ã –Ω–µ —Å–º–µ—à–∏–≤–∞—Ç—å –¥–≤–µ —Ä–∞–∑–º–µ—Ç–∫–∏)
    await m.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=subscribe_keyboard()
    )

@dp.callback_query(F.data == "check_sub")
async def cb_check_sub(c: CallbackQuery):
    gw = await get_giveaway()
    if not gw:
        await c.answer("–û—à–∏–±–∫–∞: —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    status_word = calc_status_by_time(gw["status"])
    if status_word == "–∑–∞–≤–µ—Ä—à–µ–Ω":
        try:
            await c.message.edit_text(build_giveaway_text(gw=gw, finished_view=True), disable_web_page_preview=True)
        except Exception:
            await c.message.answer(build_giveaway_text(gw=gw, finished_view=True), disable_web_page_preview=True)
        await c.answer()
        return

    ok = await is_subscribed(c.from_user.id)
    if not ok:
        await c.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)
        return

    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("""
            SELECT id FROM participants WHERE tg_id = ? AND giveaway_code = ?
        """, (c.from_user.id, GIVEAWAY_CODE))
        row = await cur.fetchone()
        if not row:
            await db.execute("""
                INSERT INTO participants(tg_id, giveaway_code, joined_at)
                VALUES (?, ?, ?)
            """, (c.from_user.id, GIVEAWAY_CODE, now_iso()))
            await db.commit()

    text = build_giveaway_text(gw=gw, finished_view=False, user_tg_id=c.from_user.id)
    try:
        await c.message.edit_text(text, disable_web_page_preview=True)
    except Exception:
        await c.message.answer(text, disable_web_page_preview=True)
    await c.answer("–£—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")

@dp.message(Command("end"))
async def cmd_end(m: Message):
    if m.from_user.id != ORGANIZER_ADMIN_ID:
        await m.answer("–¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à.", reply_markup=main_reply_keyboard())
        return

    gw = await get_giveaway()
    if not gw:
        await m.answer("–û—à–∏–±–∫–∞: —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_reply_keyboard())
        return

    if gw["status"] == "finished":
        await m.answer("–†–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=main_reply_keyboard())
        return

    results_time = await set_giveaway_finished()
    sent = await notify_all_participants(results_time)

    gw2 = await get_giveaway()
    await m.answer(
        f"–†–æ–∑—ã–≥—Ä—ã—à #{GIVEAWAY_CODE} –∑–∞–≤–µ—Ä—à—ë–Ω.\n"
        f"–ò—Ç–æ–≥–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã: {fmt_dt(gw2['results_at'])}\n"
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {sent}",
        reply_markup=main_reply_keyboard()
    )

# ================== –ó–ê–ü–£–°–ö ==================
async def main():
    await init_db()
    print("Bot started.")

    # (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∑–∞–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã-–º–µ–Ω—é, –Ω–æ –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await bot.set_my_commands([
        BotCommand(command="create", description="üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à"),
        BotCommand(command="my_giveaways", description="üìù –ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏"),
        BotCommand(command="my_channels", description="üì¢ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã"),
    ])

    asyncio.create_task(auto_watcher())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
